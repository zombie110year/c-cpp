##########
C 语言语法
##########

从自然语言到形式语言
====================

我们日常生活中所讲所书的语言就是 *自然语言* , 例如汉语, 英语等.
自然语言是经过长时间的自然演化而形成的. 在演化过程中, 没有完善的规则
(虽然也有人希望能够总结出规则, 但总有例外情况, 并且总会有词语的含义不可预料的发生变化).
在很多时候, 只能依靠学习经验来从语言中提取信息.
这也就是为什么我们要花十几年的时间学习语文, 才能与人流畅的交流.

而 *形式语言* 则是在设计时就拥有了严格的语法, 在各个层次上对语言的表达进行规定.

形式语言与自然语言在结构上具有一些相同的要素, 例如:

.. _`语法的要素`:

.. list-table:: 语法的要素

   *  -  文法(Grammar)
      -  句子组成段落、文章的规则
   *  -  句法(Syntax)
      -  词与词之间组成句的规则
   *  -  词法(Lexical)
      -  字与字之间组成词的规则
   *  -  字(Token)
      -  最小语素

.. note::

   文法/语法/句法 经常混淆.

   -  Grammar 可译作 文法 或 语法
   -  Syntax 也可译作 句法 或 语法

   为了避免歧义, 本书使用 语法 作为上述内容的统称.
   文法和句法单独使用.

编程语言就是形式语言的一种, 而其他的形式语言还有数学表达式, 化学式等等.
例如, :math:`1+1=3` 是一个符合数学表达式的语法的 *句* , 而 :math:`1 a 1 = 2` 就不是.
虽然 :math:`1+1=3` 不是一个正确的等式, 但它的错误出在 **语义(Semantic)** 而非 **语法**,
而 :math:`1 a 1 = 3` 呢? 它缺少了运算符, 或者说在运算符的位置插入了一个代数符号.
这就是语法的错误了.

常见的语法错误有:

-  无效的 *字*, 例如, 在化学式中 :math:`$_2O` 是错误的,
   化学式中没有定义 ``$`` 的含义.
-  错误的 *词*, 例如, :math:`Zm^{2+}`,
   没有元素的缩写是 :math:`Zm`.
-  错误的 *句*, 例如 :math:`1+=3 2`, 词之间的顺序出现了错误.

自然语言和形式语言也存在不同之处.

.. todo:: 编译原理, 上下文无关文法与上下文相关文法

歧义性(Ambiguity)
   自然语言充满歧义, 人们通过上下文的线索和自己的常识来消除歧义
   (或者不能消除而造成误解).
   形式语言的设计要求是清晰的、毫无歧义的, 这意味着每个语句都必须有确切的含义, 与上下文无关.
冗余性(Redundancy)
   为了消除歧义减少误解或者提高艺术性, 自然语言引入了相当多的冗余.
   而形式语言只负责基本表意, 更加紧凑, 极少有冗余.
与字面意思的一致性
   自然语言充斥着成语和隐喻(Metaphor) , 我在某种场合下说 "葡萄架子倒了",
   可能并不是说哪里的葡萄架子倒了, 而是说某某人怕老婆.
   在某些语境下, 连 "睿智" 这种词也可以用来骂人.

   而形式语言中字面 (Literal) 意思就是真实意思.
   虽然表面上看起来存在例外, 例如转义序列.
   但实际上, 转义序列表示的也是它这个词所对应的字面含义.

   例如, C 语言用 ``\n`` 符号表示 *换行符*, 但是它和 ``n`` 并没有关系,
   ``\n`` 是换行符的字面量, 而 ``n`` 是字母 n 的字面量.

C 语言中的语素
==============

在 :ref:`语法的要素` 中, 提到了形式语言中存在的语素有: *字*, *词*, *句*, *文*.
让我们一一对应到 :ref:`hello.c` 中来看一看, C 代码中的哪些元素属于哪种语素.

第一行是预处理语句, 我们关注 main 函数的部分:

.. literalinclude:: _code/hello.c
   :language: c
   :linenos:
   :lines: 3-

在上面显示的代码中, 每一个字符,
例如 ``i`` , ``n``, ``t``, 空格 ... 等等,
就是 C 中的 *字*. 它们组合在一起、或者独立成词
(例如 ``for`` 循环中的变量 ``i``),
空白字符在词法分析中是被抛弃的,
编译器不认为空格这类空白字符能组词:

+------+-------------+
| 词   | 类型        |
+------+-------------+
| int  | 类型声明    |
+------+-------------+
| main | 函数名称    |
+------+-------------+
| (    | 开圆括号    |
+------+-------------+
| int  | 类型声明    |
+------+-------------+
| argc | 变量名称    |
+------+-------------+
| ,    | 逗号分隔符  |
+------+-------------+
| char | 类型声明    |
+------+-------------+
| ...  |             |
+------+-------------+

等等, 组成了代码中的 *词*

而语法分析则将词组成 *句*, 在 C 语言中, 一般将句称为 "表达式", 例如:

.. list-table::

   *  -  句
      -  含义
   *  -  ``printf("Hello World\n")``
      -  调用一个名为 ``printf`` 的函数,
         并将 ``"Hello World!\n"`` 作为参数传递

语义分析就会将 *句* 组成 *文* 了,
涉及到的主要结构有:

-  以 ``;`` 结尾的表达式构成 *语句*
-  包括在 ``{}`` 中的众多语句构成 *语句块*
-  各独立的语句, 语句块构成整个程序的 *文*.

C 语言中的词
------------

C 语言中的词根据用途的不同, 可以分为:

标识符
   标识符是用来标识一个结构的符号, 类似于数学中的代数符号.
   C 语言中的标识符可以是 变量名、函数名、类型名等.
操作符
   操作符用来表示一个操作,
   例如 +-\*/ 等四则运算, 调用函数 ``()``, 访问数组 ``[]`` 等等.
   操作符一定需要操作数的存在,
   不同的操作符需要的操作数数目和位置不一定相同.

   操作数可以是标识符或者字面量这种能用来表示数据的符号.
分隔符
   像 ``{}``, ``;``, ``,`` 这种用于分隔其他词的符号.
字面量
   在程序中直接表示数据的量.
关键字
   语言预先定义的有特殊作用的词, 用户不能修改其定义.

内置类型与变量声明
------------------

不同类型的字面量
----------------

操作符
------
